# frozen_string_literal: true

require 'smart_app_launch_test_kit'

module USCoreTestKit
  module Client
    module <%= module_name %>
      class <%= class_name %> < Inferno::TestGroup
        include URLs

        id :<%= group_id %>

        title '<%= title %>'

        description %(
          <%= description %>
        )

        test do
          id :<%= test_id %>

          title '<%= title %>'

          description %(
            <%= description %>
          )

          input :client_id,
                title: 'Client Id',
                type: 'text',
                optional: true,
                locked: true,
                description: SMARTAppLaunch::INPUT_CLIENT_ID_DESCRIPTION_LOCKED
          input :smart_launch_urls,
                title: 'SMART App Launch URL(s)',
                type: 'textarea',
                locked: true,
                optional: true,
                description: SMARTAppLaunch::INPUT_SMART_LAUNCH_URLS_DESCRIPTION_LOCKED
          input :launch_context,
                title: 'Launch Context',
                type: 'textarea',
                optional: true,
                description: SMARTAppLaunch::INPUT_LAUNCH_CONTEXT_DESCRIPTION       
          input :fhir_user_relative_reference,
                title: 'FHIR User Relative Reference',
                type: 'text',
                optional: true,
                description: SMARTAppLaunch::INPUT_FHIR_USER_RELATIVE_REFERENCE
          
          input_order :launch_context, :fhir_user_relative_reference, :smart_launch_urls, :client_id
          output :launch_key

          run do
            if smart_launch_urls.present?
              launch_key = SecureRandom.hex(32)
              output(launch_key:)
            end
            
            wait(
              identifier: client_id,
              message: %(
Inferno will now wait for the client under test to make the required requests against the following base URL:

#{fhir_url}

All requests will be recorded. When finished, the requests will be inspected to ensure that the client under test is making the required requests.

[Click here](#{resume_pass_url}?token=#{client_id}) when finished.

The following requirements will be checked:

<%= check_list %>

[Click here](#{resume_pass_url}?token=#{client_id}) when finished.
              ),
              timeout: 900
            )
          end
        end
      end
    end
  end
end
