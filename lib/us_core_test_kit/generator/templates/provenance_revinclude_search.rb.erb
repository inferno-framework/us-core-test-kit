require_relative '../../../search_test'
require_relative '../../../generator/group_metadata'

module USCoreTestKit
  module <%= module_name %>
    class <%= class_name %> < Inferno::Test
      include USCoreTestKit::SearchTest

      title 'Server returns Provenance resources from <%= resource_type %> search by <%= search_param_name_string %>'
      description %(
        A server SHALL be capable of supporting _revIncludes:Provenance:target.

        This test will perform a search by <%= search_param_name_string %> and
        will pass if a Provenance resource is found in the response.
      %)

      id :<%= test_id %>
  
      <%-
        requirement_map = {
              'AllergyIntoleranceProvenanceRevincludeSearchTest' => '489',
              'CarePlanProvenanceRevincludeSearchTest' => '490',
              'CareTeamProvenanceRevincludeSearchTest' => '491',
              'ConditionEncounterDiagnosisProvenanceRevincludeSearchTest' => '492',
              'ConditionProblemsHealthConcernsProvenanceRevincludeSearchTest' => '492',
              'CoverageProvenanceRevincludeSearchTest' => '493',
              'DeviceProvenanceRevincludeSearchTest' => '494',
              'DiagnosticReportLabProvenanceRevincludeSearchTest' => '495',
              'DiagnosticReportNoteProvenanceRevincludeSearchTest' => '495',
              'DocumentReferenceProvenanceRevincludeSearchTest' => '496',
              'EncounterProvenanceRevincludeSearchTest' => '497',
              'GoalProvenanceRevincludeSearchTest' => '498',
              'ImmunizationProvenanceRevincludeSearchTest' => '499',
              'MedicationDispenseProvenanceRevincludeSearchTest' => '500',
              'MedicationRequestProvenanceRevincludeSearchTest' => '501',
              'ObservationLabProvenanceRevincludeSearchTest' => '502',
              'ObservationOccupationProvenanceRevincludeSearchTest' => '502',
              'ObservationPregnancyintentProvenanceRevincludeSearchTest' => '502',
              'ObservationPregnancystatusProvenanceRevincludeSearchTest' => '502',
              'ObservationScreeningAssessmentProvenanceRevincludeSearchTest' => '502',
              'ObservationSexualOrientationProvenanceRevincludeSearchTest' => '502',
              'PatientProvenanceRevincludeSearchTest' => '503',
              'ProcedureProvenanceRevincludeSearchTest' => '504',
              'QuestionnaireResponseProvenanceRevincludeSearchTest' => '505',
              'RelatedPersonProvenanceRevincludeSearchTest' => '506',
              'ServiceRequestProvenanceRevincludeSearchTest' => '507'
        }
        if module_name == 'USCoreV610' && requirement_map[class_name]
      -%>
      verifies_requirements 'hl7.fhir.us.core_6.1.0@<%= requirement_map[class_name] %>'

      <%- elsif module_name == 'USCoreV700' && requirement_map[class_name] -%>
      verifies_requirements 'hl7.fhir.us.core_7.0.0@<%= requirement_map[class_name] %>'

      <%- end -%>
      <%- if needs_patient_id? -%>
      input :patient_ids,
        title: 'Patient IDs',
        description: 'Comma separated list of patient IDs that in sum contain all MUST SUPPORT elements'
  
      <%- end -%>
      def properties
        @properties ||= SearchTestProperties.new(
  <%= search_test_properties_string %>
        )
      end

      def self.metadata
        @metadata ||= Generator::GroupMetadata.new(YAML.load_file(File.join(__dir__, 'metadata.yml')))
      end

      def self.provenance_metadata
        @provenance_metadata ||= Generator::GroupMetadata.new(YAML.load_file(File.join(__dir__, '..', 'provenance', 'metadata.yml'), aliases: true))
      end

      def scratch_resources
        scratch[:<%= profile_identifier %>_resources] ||= {}
      end

      def scratch_provenance_resources
        scratch[:provenance_resources] ||= {}
      end

      run do
        run_provenance_revinclude_search_test
      end
    end
  end
end
