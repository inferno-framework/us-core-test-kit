require_relative '../../../search_test'
require_relative '../../../generator/group_metadata'

module USCoreTestKit
  module <%= module_name %>
    class <%= class_name %> < Inferno::Test
      include USCoreTestKit::SearchTest

      title 'Server returns valid results for <%= resource_type %> search by <%= search_param_name_string %>'
      description %(
<%= description %>
      )
      <%- if module_name == "USCoreV610" && !optional? && test_medication_inclusion? -%>
      verifies_requirements 'hl7.fhir.us.core_6.1.0@51', 'hl7.fhir.us.core_6.1.0@52',
                            'hl7.fhir.us.core_6.1.0@55', 'hl7.fhir.us.core_6.1.0@58',
                            'hl7.fhir.us.core_6.1.0@250'
      <%- elsif module_name == "USCoreV700" && !optional? && test_medication_inclusion? -%>
      verifies_requirements 'hl7.fhir.us.core_7.0.0@51', 'hl7.fhir.us.core_7.0.0@52',
                            'hl7.fhir.us.core_7.0.0@55', 'hl7.fhir.us.core_7.0.0@58',
                            'hl7.fhir.us.core_7.0.0@250'
      <%- elsif module_name == "USCoreV610" && !optional? -%>
      verifies_requirements 'hl7.fhir.us.core_6.1.0@51', 'hl7.fhir.us.core_6.1.0@52',
                            'hl7.fhir.us.core_6.1.0@55', 'hl7.fhir.us.core_6.1.0@58'
      <%- elsif module_name == "USCoreV700" && !optional? -%>
      verifies_requirements 'hl7.fhir.us.core_7.0.0@51', 'hl7.fhir.us.core_7.0.0@52',
                            'hl7.fhir.us.core_7.0.0@55', 'hl7.fhir.us.core_7.0.0@58'
      <%- end -%>

      id :<%= test_id %><% if optional? %>
      optional
  <% end %><% if needs_patient_id? %>
      input :patient_ids,
        title: 'Patient IDs',
        description: 'Comma separated list of patient IDs that in sum contain all MUST SUPPORT elements'
  <% end %><% if resource_type == 'Device' %>
      input :implantable_device_codes,
        title: 'Implantable Device Type Code',
        description: 'Enter the code for an Implantable Device type, or multiple codes separated by commas. '\
                    'If blank, Inferno will validate all Device resources against the Implantable Device profile',
        optional: true
  <% end %><% if profile_identifier == 'document_reference' %>
      input :document_reference_type_codes,
        title: 'DocumentReference Type Code',
        description: %(
          Enter the code for a DocumentReference type you want to exclude, or multiple codes separated by commas.
          You can provide the system along with the code, in the format `{system|}[code]`.
          If blank, Inferno will validate all DocumentReference resources against the DocumentReference profile
        ),
        optional: true
  <% end %>
      def self.properties
        @properties ||= SearchTestProperties.new(
  <%= search_test_properties_string %>
        )
      end

      def self.metadata
        @metadata ||= Generator::GroupMetadata.new(YAML.load_file(File.join(__dir__, 'metadata.yml'), aliases: true))
      end

      def scratch_resources
        scratch[:<%= profile_identifier %>_resources] ||= {}
      end

      run do
        run_search_test
      end
    end
  end
end
